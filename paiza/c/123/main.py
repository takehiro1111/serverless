"""C123:節分ロボット
あなたは神社の神主で、節分大会を開くことにしました。
節分では、年齢の数だけ豆を食べると厄除を行うことができるとされています。そこで、一列に並んだ参加者にロボットを使って豆を配ることにしました。

このロボットは、A 番目の人から B 番目の人 (A ≦ B) まで、等しく C 個の豆を配るという形式の命令を受け取って行動します。また、参加者は自分の年齢を超える豆を受け取ることはしません。
一列に並んだ参加者の年齢と、命令が与えられるので、全ての命令を実行し終わった後に各参加者が持っている豆の数を求めるプログラムを作成してください。

入力例 1 は以下のようになります。

入力例1
5
10
20
30
40
50
2
2 4 10
1 3 15

出力例1
10
20
25
10
0

参加者の状態:
- 5人いる
- それぞれ年齢制限がある（10,20,30,40,50歳）
- 各人の持つ豆の数を記録する必要がある

命令1: 2 4 10 （2-4番目の人に10個ずつ）
命令2: 1 3 15 （1-3番目の人に15個ずつ）
"""

# 人数の受け取り
NUM_PEOPLES = int(input())

# 参加者の年齢の値を人数分受け取る。
AGE = [int(input()) for _ in range(NUM_PEOPLES)]

# 命令の数
ORDERS = int(input())

# 各参加者の豆の数を管理するリスト（最初は全員0個）
## 「[0] * NUM_PEOPLES(5)」はは、人数分のインデックスの要素を0に指定している。
beans_count = [0] * NUM_PEOPLES  # [0, 0, 0, 0, 0]


def distribute_beans(ages, start_index, end_index, num_beans, beans_count=beans_count):
    for i in range(start_index - 1, end_index):
        # 命令の対象範囲
        ## 開始位置がリストの要素と人とで合致するように調整している。
        ### 例) インデックス:1 = 2番目の人(入力を2で受ける場合)
        # その人の年齢まで豆を追加
        # (豆の数と年齢を比較し小さい方を取る。豆の数が年齢を超えないよう上限設定も担っている。)
        # リストの中の要素を追加ではなく、そのインデックスの要素を更新する書き方。
        beans_count[i] = min(beans_count[i] + num_beans, ages[i])


# 繰り返しで命令する。
for _ in range(1, ORDERS + 1):
    # 豆を配る対象と個数を受け取る。
    ## 2番目の人から4番目の人までに等しく10個の豆を配る。
    ## 1番目の人から3番目の人までに等しく15個の豆を配る。
    start, end, beans = list(map(int, input().split()))

    # 豆を追加していく関数の実行
    distribute_beans(AGE, start, end, beans)


# 結果を出力(リストをforで回す)
for count in beans_count:
    print(count)
